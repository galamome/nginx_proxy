upstream ${NGINX_UPSTREAM_1} {
    server ${CONTAINER_FOOAPI}:${FOOAPI_PORT}; # server name is same as the service name used in docker-compose file
                         # port on which the service is running...NOT the exposed port(the RHS port in docker-compose ports attr.)
}
upstream ${NGINX_UPSTREAM_2} {
    server ${CONTAINER_BARAPI}:${BARAPI_PORT};
}

upstream ${NGINX_UPSTREAM_WEB_FRONT_END} {
    server ${CONTAINER_CLIENT}:${CLIENT_PORT};
}

server {
    listen ${NGINX_PORT} ssl http2;
    listen [::]:${NGINX_PORT} ssl http2;

    server_name ${NGINX_SERVER_NAME};

    ssl_protocols TLSv1.2;
    ssl_certificate /etc/nginx/ssl/_wildcard.${NGINX_SERVER_NAME}.pem;
    ssl_certificate_key /etc/nginx/ssl/_wildcard.${NGINX_SERVER_NAME}-key.pem;

   # Client web application
    location / {
        proxy_set_header Host $host;
        # enable WebSockets (for ws://sockjs not connected error in the client source: https://stackoverflow.com/questions/41381444/websocket-connection-failed-error-during-websocket-handshake-unexpected-respon)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://${NGINX_UPSTREAM_WEB_FRONT_END}/;
    }

    # API route
    location /${NGINX_ROUTE_1} {
        rewrite ^/${NGINX_ROUTE_1}/(.*) /$1 break; # works for both /server1 and /server1/
        proxy_set_header Host $host;
        proxy_pass http://${NGINX_UPSTREAM_1}/;
    }

    # API route
    location /${NGINX_ROUTE_2} {
        rewrite ^/${NGINX_ROUTE_2}/(.*) /$1 break;
        proxy_set_header Host $host;
        proxy_pass http://${NGINX_UPSTREAM_2}/;
    }
}